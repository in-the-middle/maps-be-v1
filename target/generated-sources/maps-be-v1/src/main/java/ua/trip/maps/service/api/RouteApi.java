/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ua.trip.maps.service.api;

import ua.trip.maps.service.model.RouteInputDTO;
import ua.trip.maps.service.model.RouteOutputDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-07-05T08:11:52.488171+03:00[Europe/Zaporozhye]")

@Validated
@Api(value = "route", description = "the route API")
public interface RouteApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /route : getRoute
     *
     * @param routeInputDTO  (required)
     * @return Successful operation (status code 200)
     */
    @ApiOperation(value = "getRoute", nickname = "getRoute", notes = "", response = RouteOutputDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = RouteOutputDTO.class) })
    @RequestMapping(value = "/route",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<RouteOutputDTO> getRoute(@ApiParam(value = "" ,required=true )  @Valid @RequestBody RouteInputDTO routeInputDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"summary\" : { \"minLon\" : \"\", \"maxLat\" : \"\", \"minLat\" : \"\", \"length\" : \"\", \"maxLon\" : \"\", \"time\" : \"\" }, \"shape\" : \"shape\", \"origin\" : { \"lon\" : \"\", \"lat\" : \"\" }, \"destination\" : { \"lon\" : \"\", \"lat\" : \"\" }, \"language\" : \"language\", \"units\" : \"units\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
